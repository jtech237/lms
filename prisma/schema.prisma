// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id    String  @id @default(cuid())
  email String  @unique
  name  String?
  role  Role    @default(STUDENT)

  // NextAuth relations
  accounts Account[]
  sessions Session[]

  // Relations applicatives
  courses     Course[]     @relation("AuthorCourses")
  enrollments Enrollment[]
}

model Account {
  id                String @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String

  refresh_token      String? @map("refresh_token")
  access_token       String? @map("access_token")
  expires_at         Int?    @map("expires_at")
  token_type         String? @map("token_type")
  scope              String?
  id_token           String? @map("id_token")
  session_state      String? @map("session_state")
  oauth_token_secret String? @map("oauth_token_secret")
  oauth_token        String? @map("oauth_token")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Course {
  id          String   @id @default(cuid())
  title       String
  description String?
  coverImage  String?
  author      User     @relation("AuthorCourses", fields: [authorId], references: [id])
  authorId    String
  lessons     Lesson[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  enrollments Enrollment[]
}

model Lesson {
  id       String @id @default(cuid())
  title    String
  content  String // Markdown ou autre
  course   Course @relation(fields: [courseId], references: [id])
  courseId String
  order    Int
}

model Enrollment {
  id         String   @id @default(cuid())
  student    User     @relation(fields: [studentId], references: [id])
  studentId  String
  course     Course   @relation(fields: [courseId], references: [id])
  courseId   String
  progress   Float    @default(0)
  enrolledAt DateTime @default(now())
}

enum Role {
  STUDENT
  TEACHER
  ADMIN
}
